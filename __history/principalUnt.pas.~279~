unit principalUnt;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, Vcl.Dialogs,
  FMX.Controls.Presentation, FMX.StdCtrls, FMX.Objects, FMX.Layouts, FMX.ListBox,
  FMX.Edit, dmUnt, produto, itemConsumido, conta;

type
  TprincipalFrm = class(TForm)
    principalSTB: TStyleBook;
    tituloPnl: TPanel;
    tituloTxt: TText;
    rodapeLyt: TLayout;
    produtosBtn: TButton;
    unidadesMedidaBtn: TButton;
    tiposProdutoBtn: TButton;
    sairBtn: TButton;
    produtosLyt: TLayout;
    produtosTxt: TText;
    produtosList: TListBox;
    camposLyt: TLayout;
    contasBtn: TButton;
    novaContaBtn: TButton;
    itensLyt: TLayout;
    itensTxt: TText;
    itensList: TListBox;
    cancelarSalvarLyt: TLayout;
    cancelarBtn: TButton;
    salvarBtn: TButton;
    okBtn: TButton;
    nomeEdt: TEdit;
    nomeLbl: TLabel;
    dataLbl: TLabel;
    espacoDireitoLyt: TLayout;
    espacoEsquerdoLyt: TLayout;
    codigoContaLbl: TLabel;
    itemLbl: TLabel;
    precoLbl: TLabel;
    quantidadeEdt: TEdit;
    quantidadeLbl: TLabel;
    produtosSplitter: TSplitter;
    totalTxt: TText;
    totalLbl: TLabel;
    procedure FormShow(Sender: TObject);
    procedure sairBtnClick(Sender: TObject);
    procedure novaContaBtnClick(Sender: TObject);
    procedure produtosListDblClick(Sender: TObject);
    procedure okBtnClick(Sender: TObject);
    procedure itensListDblClick(Sender: TObject);
    procedure cancelarBtnClick(Sender: TObject);
    procedure quantidadeEdtKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure produtosListKeyDown(Sender: TObject; var Key: Word;
      var KeyChar: Char; Shift: TShiftState);
    procedure salvarBtnClick(Sender: TObject);
  private
    { Private declarations }
    produtoSelecionado: TProduto;

    function atualizarListaProdutos(): boolean;
    function getProdutoLista(linhaSelecionada: string): TProduto;
    function getItemConsumido(linhaSelecionada: string): TItemConsumido;
    procedure atualizarTotal();
    procedure limparTela();
  public
    { Public declarations }
  end;

var
  principalFrm: TprincipalFrm;

implementation

{$R *.fmx}

function TprincipalFrm.atualizarListaProdutos(): boolean;
begin
  try
    result := false;

    produtosList.Items.Clear;

    dm.produtosQry.Close;
    dm.produtosQry.Open;

    dm.tiposProdutoQry.Close;
    dm.tiposProdutoQry.Open;

    while not dm.tiposProdutoQry.Eof do
    begin
      produtosList.Items.Add(dm.tiposProdutoQryNOME.AsString);

      dm.produtosQry.Filtered := false;
      dm.produtosQry.Filter := 'tipoProduto = ' + QuotedStr(dm.tiposProdutoQryNOME.AsString);
      dm.produtosQry.Filtered := true;

      while not dm.produtosQry.Eof do
      begin
        produtosList.Items.Add(
          '  ' + dm.produtosQryCODIGO.AsString
          + '-' + dm.produtosQryNOME.AsString
          + ' R$ ' + FormatFloat('0.00', dm.produtosQryPRECO.Value)
          + '/' + UpperCase(dm.produtosQryCODUNIDADEMEDIDA.AsString)
        );

        dm.produtosQry.Next;
      end;

      dm.tiposProdutoQry.Next;
    end;

    result := true;
  finally
    dm.tiposProdutoQry.Close;

    dm.produtosQry.Filtered := false;
    dm.produtosQry.Filter := '';
    dm.produtosQry.Close;
  end;
end;

procedure TprincipalFrm.okBtnClick(Sender: TObject);
var
  quantidade: double;
  subTotal: double;
  item: TListBoxItem;
begin
  if (quantidadeEdt.Text = '') then
  begin
    MessageDlg('Informe a quantidade', mtInformation, [mbOk], 0);
    quantidadeEdt.SetFocus;
  end
  else
  begin
    if (Pos(',', quantidadeEdt.Text) > 0) then
    begin
      if produtoSelecionado.CodUnidadeMedida = 'UN' then
      begin
        quantidadeEdt.Text := Copy(
          quantidadeEdt.Text, 0,
          Pos(',', quantidadeEdt.Text) - 1
        );
      end
      else
      begin
        quantidadeEdt.Text := Copy(
          quantidadeEdt.Text, 0,
          Pos(',', quantidadeEdt.Text) + 2
        );
      end;
    end;

    quantidadeEdt.Text := FormatFloat('0.00', StrToFloat(quantidadeEdt.Text));

    quantidade := StrToFloat(quantidadeEdt.Text);

    if (quantidade > 0) then
    begin
      subTotal := quantidade * produtoSelecionado.Preco;

      item := TListBoxItem.Create(itensList);
      item.Text := IntToStr(produtoSelecionado.Codigo) + '-' + produtoSelecionado.Nome
        + ' - ' + FormatFloat('0.00', quantidade) + produtoSelecionado.CodUnidadeMedida
        + ' - R$ ' + FormatFloat('0.00', subTotal);

      itensList.Items.Add(
        IntToStr(produtoSelecionado.Codigo) + '-' + produtoSelecionado.Nome
        + ' - ' + FormatFloat('0.00', quantidade) + ' ' + produtoSelecionado.CodUnidadeMedida
        + ' - R$ ' + FormatFloat('0.00', subTotal)
      );

      itemLbl.Text := 'Item: ';
      precoLbl.Text := 'Preço: ';
      quantidadeEdt.Text := '0,00';
      quantidadeEdt.Enabled := false;
      okBtn.Enabled := false;

      atualizarTotal();
    end
    else
      quantidadeEdt.SetFocus;
  end;
end;

function TprincipalFrm.getProdutoLista(linhaSelecionada: string): TProduto;
begin
  result := TProduto.Create();

  if (linhaSelecionada <> '') then
  begin
    result.Codigo := StrToInt(Copy(
      linhaSelecionada, 2, Pos('-', linhaSelecionada) - 2
    ));

    linhaSelecionada := Copy(
      linhaSelecionada,
      Pos('-', linhaSelecionada) + 1,
      Length(linhaSelecionada)
    );

    result.Nome := Copy(
      linhaSelecionada, 0,
      Pos('$', linhaSelecionada) - 3
    );

    linhaSelecionada := Copy(
      linhaSelecionada,
      Pos('$', linhaSelecionada) + 2,
      Length(linhaSelecionada)
    );

    result.Preco := StrToFloat(Copy(
      linhaSelecionada, 0,
      Pos('/', linhaSelecionada) - 1
    ));

    linhaSelecionada := Copy(
      linhaSelecionada,
      Pos('/', linhaSelecionada) + 1,
      Length(linhaSelecionada)
    );

    result.CodUnidadeMedida := UpperCase(Copy(linhaSelecionada, 0, 2));
  end;
end;

procedure TprincipalFrm.itensListDblClick(Sender: TObject);
var
  itemConsumido: TItemConsumido;
begin
  if (itensList.Selected.Text <> '') and
     (Pos('Item', itensList.Selected.Text) = 0) then
  begin
    itemConsumido := getItemConsumido(itensList.Selected.Text);

    if (itemConsumido.Total > 0) then
    begin
      if MessageDlg('Deseja cancelar o item selecionado?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
      begin
        itensList.Items.Delete(itensList.ItemIndex);
        atualizarTotal();
      end;
    end;
  end;
end;

function TprincipalFrm.getItemConsumido(linhaSelecionada: string): TItemConsumido;
begin
  result := TItemConsumido.Create;

  if (linhaSelecionada <> '') then
  begin
    result.Codigo := StrToInt(Copy(
      linhaSelecionada, 0, Pos('-', linhaSelecionada) - 1
    ));

    linhaSelecionada := Copy(
      linhaSelecionada,
      Pos('-', linhaSelecionada) + 1,
      Length(linhaSelecionada)
    );

    result.Nome := Copy(
      linhaSelecionada, 0,
      Pos('-', linhaSelecionada) - 2
    );

    linhaSelecionada := Copy(
      linhaSelecionada,
      Pos('-', linhaSelecionada) + 2,
      Length(linhaSelecionada)
    );

    result.Quantidade := StrToFloat(Copy(
      linhaSelecionada, 0,
      Pos(' ', linhaSelecionada) - 1
    ));

    linhaSelecionada := Copy(
      linhaSelecionada,
      Pos(' ', linhaSelecionada) + 1,
      Length(linhaSelecionada)
    );

    result.CodUnidadeMedida := Copy(
      linhaSelecionada, 0, 2
    );

    linhaSelecionada := Copy(
      linhaSelecionada,
      Pos('$', linhaSelecionada) + 2,
      Length(linhaSelecionada)
    );

    result.Total := StrToFloat(Copy(
      linhaSelecionada, 0, Length(linhaSelecionada)
    ));
  end;
end;

procedure TprincipalFrm.atualizarTotal();
var
  total: double;
  index: integer;
  itemConsumido: TItemConsumido;
begin
  total := 0;

  if (itensList.Items.Count > 1) then
  begin
    for index := 0 to itensList.Items.Count - 1 do
    begin
      if (Pos('Item', itensList.Items[index]) = 0) then
      begin
        itemConsumido := getItemConsumido(itensList.Items[index]);
        total := total + itemConsumido.Total;
      end;
    end;
  end;

  totalLbl.Text := 'R$ ' + FormatFloat('0.00', total);
end;

procedure TprincipalFrm.limparTela();
begin
  itensList.Items.Clear;
  produtosList.Items.Clear;
  codigoContaLbl.Text := '';
  dataLbl.Text := '';
  itemLbl.Text := 'Item: ';
  precoLbl.Text := 'Preço: ';
  quantidadeEdt.Text := '0,00';
  atualizarTotal();
end;

procedure TprincipalFrm.cancelarBtnClick(Sender: TObject);
begin
  if MessageDlg('Deseja cancelar a conta?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
  begin
    limparTela();
    itensList.Enabled := false;
    produtosList.Enabled := false;
    cancelarBtn.Enabled := false;
    salvarBtn.Enabled := false;
    nomeEdt.Enabled := false;
    quantidadeEdt.Enabled := false;
    okBtn.Enabled := false;
    novaContaBtn.Enabled := true;
  end;
end;

procedure TprincipalFrm.produtosListDblClick(Sender: TObject);
begin
  if (produtosList.Selected.Text <> '') and
     (Pos('-', produtosList.Selected.Text) > 0) then
  begin
    produtoSelecionado := getProdutoLista(produtosList.Selected.Text);

    itemLbl.Text := 'Item: ' + produtoSelecionado.Nome;
    precoLbl.Text := 'Preço: R$ '
      + produtoSelecionado.getPrecoFormatado
      + ' por ' + produtoSelecionado.CodUnidadeMedida;

    okBtn.Enabled := true;
    quantidadeEdt.Enabled := true;
    quantidadeEdt.SetFocus;
  end;
end;

procedure TprincipalFrm.produtosListKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if (Key = vkReturn) then
  begin
    produtosListDblClick(produtosList);
  end;
end;

procedure TprincipalFrm.quantidadeEdtKeyDown(Sender: TObject; var Key: Word;
  var KeyChar: Char; Shift: TShiftState);
begin
  if Key = vkReturn then
  begin
    okBtnClick(okBtn);
    produtosList.SetFocus;
  end;

  if not (KeyChar in ['0'..'9',',',#8]) then
    KeyChar := #0;
end;

procedure TprincipalFrm.FormShow(Sender: TObject);
var
  titulo: string;
begin
  try
    if (dm = nil) then
      Application.CreateForm(Tdm, dm);

    if not dm.connectDB(GetCurrentDir) then
    begin
      MessageDlg('Não foi possível conectar a base de dados. '
        + 'Verifique o seu arquivo de configuração.',
        mtInformation, [mbOk], 0
      );
    end;
  except
    on E: Exception do
    begin
      MessageDlg('Erro: ' + e.Message + '. Ao tentar conectar a base de dados.',
        mtError, [mbOk], 0
      );
    end;
  end;

  titulo := 'Caixa - ' + DateToStr(Now);
  principalFrm.Caption := titulo;
  tituloTxt.Text := titulo;
  limparTela();
end;

procedure TprincipalFrm.novaContaBtnClick(Sender: TObject);
begin
  if atualizarListaProdutos() then
  begin
    produtosList.Enabled := true;
    codigoContaLbl.Text := dm.gerarCodConta();
    dataLbl.Text := DateToStr(Now);
    nomeEdt.Enabled := true;
    nomeEdt.SetFocus;
    novaContaBtn.Enabled := false;
    itensList.Items.Add('Item - Qtd - Valor');
    atualizarTotal();
    cancelarBtn.Enabled := true;
    salvarBtn.Enabled := true;
    itensList.Enabled := true;
  end;
end;

procedure TprincipalFrm.sairBtnClick(Sender: TObject);
begin
  Close;
end;

procedure TprincipalFrm.salvarBtnClick(Sender: TObject);
var
  conta: TConta;
  index: integer;
  itemConsumido: TItemConsumido;
begin
  if (itensList.Items.Count < 2) then
  begin
    MessageDlg('É preciso inserir pelo menos um item na Conta.', mtInformation, [mbOk], 0);
  end
  else
  begin
    conta := TConta.Create;
    conta.Codigo := codigoContaLbl.Text;
    conta.Nome := nomeEdt.Text;
    conta.Data := Now;

    for index := 0 to itensList.Items.Count - 1 do
    begin
      if (Pos('Item', itensList.Items[index]) = 0) then
      begin
        itemConsumido := getItemConsumido(itensList.Items[index]);
        conta.adicionarItem(itemConsumido);
      end;
    end;

    if (dm.gravarConta(conta)) then
    begin
      MessageDlg('Conta finalizada com sucesso!', mtInformation, [mbOk], 0);
      limparTela();
      novaContaBtnClick(novaContaBtn);
    end
    else
      MessageDlg('Não foi possível finalizar a conta. Tente novamente', mtWarning, [mbOk], 0);
  end;
end;

end.
